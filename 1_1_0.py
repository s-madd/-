# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.1.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzsrlxZNMy4buMsvz-10ad0RZsLuijQr

**ФИО:**
"""

Рассадин Вячеслав Александрович

"""# Задание 1

**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.


Отрабатываемый принцип: Наследование
"""

class Employee:
  def __init__(self, name, exp, time): #exp - стаж работы в месяцах, time - количество часов
    self.name = name
    self.exp = exp
    self.time = time
    self.award_count = ((time * 60) + time * exp * 0.02 * 80)
    self.wages_count = time * 220

  def award(self):
    return self.award_count

  def wages(self):
    return self.wages_count


class Manager(Employee):
  def pay(self):
    return self.wages_count + self.award_count


class Developer(Employee):
  def __init__(self, name, exp, time, order): #order - колво заказов
    self.name = name
    self.exp = exp
    self.time = time
    self.award_count = ((time * 60) + time * exp * 0.02 * 80)
    self.wages_count = time * 220
    self.order_award_count = order * 300000 // time

  def order_award(self):
    return self.order_award_count

  def pay(self):
    return self.wages_count + self.award_count + self.order_award_count



worker1 = Developer('artur', 8, 340, 6)
worker2 = Manager('alex', 12, 220)

print(worker2.wages())
print(worker2.award())
print(worker2.pay())
print()
print(worker1.wages())
print(worker1.award())
print(worker1.order_award())
print(worker1.pay())

"""# Задание 2

**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.


Отрабатываемый принцип: Полиморфизм
"""

class Transport:

  def __init__(self, name, brand, max_speed):
    self.name = name
    self.brand = brand
    self.max_speed = max_speed

  def specification(self):
    return f'''Тип - Другой транспорт
Бренд - {self.brand}
Название - {self.name}
Макс. скорость - {self.max_speed} km/h'''


class Moto(Transport):

  def specification(self):
    return f'''Тип - Мотоциклы
Бренд - {self.brand}
Название - {self.name}
Макс. скорость - {self.max_speed} km/h'''


class Auto_BMW(Transport):

  def __init__(self, name, max_speed):
    self.name = name
    self.max_speed = max_speed

  def specification(self):
    return f'''Тип - Автомобили
Бренд - BMW
Название - {self.name}
Макс. скорость - {self.max_speed} km/h'''


class Bus(Transport):

  def specification(self):
    return f'''Тип - Автобусы
Бренд - {self.brand}
Название - {self.name}
Макс. скорость - {self.max_speed} km/h'''



velo = Transport('Велосипед "Весна"', 'Самарский велозавод', 35)
moto = Moto('SuperSonic', 'Gucchi', 240)
bmw = Auto_BMW('M5 Competition', 305)
bus = Bus('Tapok', 'Adidas', 120)

print(velo.specification())
print()
print(moto.specification())
print()
print(bmw.specification())
print()
print(bus.specification())

"""# Задание 3

Онлайн-магазин:
- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.
- Product включает информацию о цене, наличии на складе и категории товара.
Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.
- Customer управляет информацией о пользователе и его истории заказов.
- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.
"""

all_items = {}

class Product:

  def __init__(self, name, price, category, stock):
    self.name = name
    self.price = price
    self.category = category
    self.stock = stock

  def available(self, num):
    return self.stock >= num

  def less_stock(self, num):
    if self.available(num):
      self.stock -= num
    else: print('На складе недостаточно товара')

  def more_stock(self, num):
    self.stock += num


class Order:

  def __init__(self, customer, all_items):
    self.customer = customer
    self.items = {}
    self.discount = 0
    self.tax = 0.1 #10% налоги
    self.total_price = 0
    self.all_items = all_items

  def add_item(self, item, num):
    self.item = item
    self.num = num
    if item.available(num):
      item.less_stock(num)
      if item.name not in self.items:
        self.items[item.name] = num
      else: self.items[item.name] += num
    else: print('На складе недостаточно товара. Попробуйте заказать меньше')

  def discounts(self):
    self.discount = 0
    if sum(self.items.values()) >= 10:
      self.discount += 0.13
    if sum(self.items.values()) >= 50:
      self.discount += 0.2
    if sum(self.items.values()) >= 100:
      self.discount += 0.25
    if sum(self.items.values()) >= 200:
      self.discount += 0.3
    if sum(self.items.values()) >= 500:
      self.discount += 0.4

  def purchase(self):
    self.total_price = 0
    for i in self.all_items.values():
      self.total_price += i.price * self.items[i.name]

    print('Ваша корзина: ')
    for i in self.items.keys():
      print(f'{i} - {self.items[i]} шт.')
    print()
    print(f'Цена без скидки: {self.total_price + int(self.total_price) * self.tax}')
    print(f'Скидка составит {self.discount * 100} % ({int((self.discount) *self.total_price)} руб.)')
    print(f'Доп. налоговая плата - {int(self.total_price) * self.tax} руб.')
    print(f'К оплате - {int(self.total_price * (1 - self.discount)) + self.total_price * self.tax} руб.')



class Customer:

  def __init__(self, name, email):
    self.name = name
    self.email = email
    self.orders = []

  def add_order(self, order):
    self.orders.append(order)

  def show(self):
    print()
    print(f'История покупок {self.name}:')
    for i in self.orders:
      print(i)
    print()


class ShoppingCart:

  def __init__(self, prod, count, user):
    self.prod = prod
    self.count = count
    self.user = user
    self.cart = user.items

  def delete(self):
    if self.prod.name not in self.cart:
      print('Данного товара нет в корзине')
    else:
      if self.cart[self.prod.name] < self.count:
        print('В корзине нет такого количества товара')
      else:
        self.cart[self.prod.name] -= self.count
        print('Корзина успешно изменена')
        print()
        self.user.items = self.cart

  def add(self):
    if self.prod.name not in self.cart:
      print('Данного товара нет в корзине')
    else:
      if self.count > self.prod.stock:
        print('На складе нет такого количества товара')
      else:
        self.cart[self.prod.name] += self.count
        print('Корзина успешно изменена')
        print()
        self.user.items = self.cart



videoadapter = Product('Видеоадаптер', 32400, 'computer components', 200)
all_items['Видеоадаптер'] = videoadapter
client = Order('Mike', all_items)
history_Mike = Customer('Mike', 'mike2309@gmail.com')


client.add_item(videoadapter, 25)
client.add_item(videoadapter, 26)

client.discounts()
client.purchase()

history_Mike.add_order(f'Видеоадаптер - 25шт')
history_Mike.add_order(f'Видеоадаптер - 26шт')
history_Mike.show()

ShoppingCart(videoadapter, 50, client).delete()
ShoppingCart(videoadapter, 10, client).add()

client.discounts()
client.purchase()

"""# Задание 4

Симулятор космического корабля:
- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.
- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.
- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).
- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами).
"""

import random as rd
import time

class SpaceShip:

  def __init__(self, name, type_ship):
    self.name = name
    self.lvl = 0
    self.type_ship = type_ship
    self.speed = 0
    self.hp = 100
    self.c_ing = 0
    self.c_scien = 0

    print(f'Корабль успешно создан. Тип корабля - {self.type_ship}')
    print()

    if type_ship == 1:
      self.max_speed = 12000
      self.fuel_cons = 0.5
      self.fuel = 250
      self.mass = 50
      self.armor = 100
      print('Космический истребитель. Это небольшой, маневренный корабль')

    elif type_ship == 2:
      self.max_speed = 5000
      self.fuel_cons = 120
      self.fuel = 6000
      self.mass = 5720
      self.armor = 660
      print('Тяжелый крейсер. Здоровая махина')

    else: print('Вы указали неправильный тип корабля. Перезапустите программу')

    print()
    print(f'''Масса - {self.mass} тонн,
    Макс. скорость - {self.max_speed} км/ч,
    Расход топлива - {self.fuel_cons} тонн/1000 км,
    Объем топливного бака - {self.fuel} тонн,
    Защита - {self.armor} усл. ед.
    ''')


class CrewMember:

  def __init__(self, role, ship):
    self.role = role

    if role == '1':
      self.hp = 100
      n = rd.choice(range(1, 4))
      self.skill_text = f'восстановление корпуса {n}/час'
      print(self.skill_text)
      self.skill = n
      ship.c_ing += n

    if role == '2':
      self.hp = 60
      n = rd.choice([0.1, 0.3, 0.5, 0.7, 1])
      self.skill_text = f'создает толпиво с помощью атомного реактора на корабле. {n} тонн/час'
      print(self.skill_text)
      self.skill = n
      ship.c_scien += n


class Mission:

  def __init__(self, event, ship):
    self.list_of_events = [
        'ничего особенного',
        'столкновение с астероидом',
        'неизвестная планета',
        'черная дыра',
        'бой с инопланетной расой',
        'сломался двигатель',
        'неизвестный груз',
        'летающий астронавт'
    ]

    self.event = event

    print()
    print(self.list_of_events[self.event])

    if self.event == 0:
      time.sleep(1)
      print('Какая хорошая погода..')
      time.sleep(2)

    elif self.event == 1:
      time.sleep(1)
      ship.hp -= 500 * (1 / ship.armor)
      print(f'Вы столкнулись с астероидом. Получен урон {500 * (1 / ship.armor)}. Корабль: {ship.hp}')
      time.sleep(2)

    elif self.event == 2:
      time.sleep(1)
      print('На планете вы нашли материалы. Ваши ученые могут восстановить топливо')
      if ship.c_scien > 0:
        ship.fuel += ship.c_scien * 0.8
        print(f'+ {ship.c_scien * 0.8} тонн')
      else: print('(у вас их нет)')

    elif self.event == 3:
      time.sleep(1)
      print('Долетались')
      ship.hp = 0

    elif self.event == 4:
      time.sleep(1)
      print('Какие-то чернокожие с хвостами. Чужие!')
      time.sleep(3)
      print('После взбучки с инопришельцами ваш корабль пострадал')
      damage = rd.choice(range(200, 1500)) * (1 / ship.armor) * 1.2
      ship.hp -= damage
      print(f'- {damage}')
      time.sleep(1)

    elif self.event == 5:
      print('Двигатель заглох. Подождем...')
      time.sleep(15)

    elif self.event == 6:
      print('Что в ящике пандоры? Кажется стройматериалы для вашего корабля. Инженеры всё починят!')
      if ship.c_ing > 0:
        ship.fuel += ship.c_ing * 5
        print(f'+ {ship.c_ing * 5}')
        if ship.hp > 100: ship.hp = 100
      else: print('(у вас их нет)')

    elif self.event == 7:
      print('Какая удача! Новый раб на нашем судне! Выберите какую роль он будет играть на вашем корабле')
      vvod = 0
      print('1 - инженер')
      print('2 - ученый')

      while vvod != '1' and vvod != '2':
        vvod = input('Ввод: ')
      CrewMember(vvod, ship)


    def show_events(self):
      return self.list_of_events


def main():

  print('Ну привет. Созздадим корабль.')
  print()

  vvod = 0

  print('1 - легкий и маневреный корабль')
  print('2 - здоровая махина')
  print()

  while vvod != '1' and vvod != '2':
    vvod = input('Ввод: ')

  myship = SpaceShip('avrora', int(vvod)) #существующие типы - 1, 2

  print('Пока в твоем экипаже никого нет')
  print('Ну что-ж. Начинаем запуск')
  time.sleep(1)
  print('1')
  time.sleep(2)
  print('2')
  time.sleep(1)
  print('3')
  time.sleep(1)
  print('Пуск!')
  print()
  print('*Игра началась*')

  while True:

    print()
    n_event = rd.choice(range(8))
    Mission(n_event, myship)
    myship.fuel -= myship.fuel_cons
    print(f'''
    --------
    Здоровье корабля - {myship.hp}
    Топливо - {myship.fuel}
    --------
    ''')

    time.sleep(2)

    if myship.hp <= 0 or myship.fuel <= 0:
      print('Всё!')
      break


main()

"""# Дополнительно:

**Описание:** создайте консольную версию игры крестики-нолики, используя классы
"""

