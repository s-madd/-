{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732636574047}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО: Рассадин Вячеслав Александрович\n"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","  vacation_days = 28\n","\n","  def __init__(self, firstname, secondname):\n","    self.firstname = firstname\n","    self.secondname = secondname\n","    self.remaining_vacation_days = self.vacation_days\n","\n","  def consume_vacation(self, days):\n","    self.remaining_vacation_days -= days\n","\n","  def vacation_details(self):\n","    return f'Остаток отпускных дней: {self.remaining_vacation_days}'\n","\n","worker = Employee('Артур', 'Пирожков')\n","\n","print(worker.firstname)\n","print(worker.secondname)\n","print(worker.remaining_vacation_days)\n","\n","worker.consume_vacation(5)\n","\n","print()\n","print(worker.vacation_details())"],"metadata":{"id":"2TyRY9a1XCOu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732637676379,"user_tz":-300,"elapsed":761,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"8ad8f654-4ef7-43c3-f303-62721bdef647"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Артур\n","Пирожков\n","28\n","\n","Остаток отпускных дней: 23\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"C0Z_wXo9XIr2"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","  def __init__(self, widht, height):\n","    self.height = height\n","    self.widht = widht\n","\n","  def square(self):\n","    return self.height * self.widht\n","\n","  def perimeter(self):\n","    return (self.height * 2) + (self.widht * 2)\n","\n","  def size(self):\n","    return f'Высота: {self.height}. Ширина: {self.widht}.'\n","\n","rectangle = Rectangle(3, 54)\n","\n","print(f'Площадь: {rectangle.square()}')\n","print(f'Периметр: {rectangle.perimeter()}')\n","print(rectangle.size())"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732639160920,"user_tz":-300,"elapsed":553,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"7d865788-d118-4ec9-97fa-cda0304297b4"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Площадь: 162\n","Периметр: 114\n","Высота: 54. Ширина: 3.\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccountco:\n","  def __init__(self, account_holder):\n","    self.account_holder = account_holder\n","    self.balance = 0\n","\n","  def deposit(self, amount):\n","    self.balance += amount\n","    print(f'Счет пополнен на {amount}')\n","\n","  def withdraw(self, amount):\n","    if (self.balance - amount) >= 0:\n","      self.balance -= amount\n","      print(f'Успешно выведено {amount}')\n","    else:\n","      print('Средств на счете не достаточно :(')\n","\n","  def get_balance(self):\n","    print(f'Ваш баланс: {self.balance}')\n","\n","holder = BankAccountco('Артур Пирожков')\n","\n","print(holder.account_holder)\n","print()\n","print()\n","print()\n","holder.get_balance()\n","print()\n","holder.deposit(23990)\n","print()\n","holder.withdraw(20000)\n","holder.get_balance()\n","holder.withdraw(20000)\n","holder.get_balance()\n","\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732641397297,"user_tz":-300,"elapsed":946,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"3c84a97b-6200-43ae-bcf7-e79df57996a7"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Артур Пирожков\n","\n","\n","\n","Ваш баланс: 0\n","\n","Счет пополнен на 23990\n","\n","Успешно выведено 20000\n","Ваш баланс: 3990\n","Средств на счете не достаточно :(\n","Ваш баланс: 3990\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","import time\n","\n","\n","class knight:\n","\n","  def __init__(self, name, hp, damage, armor, sword):\n","    self.name = name\n","    self.hp = hp\n","    self.damage = damage\n","    self.armor = armor\n","    self.sword = sword\n","    self.f_hp = int(hp * armor * 0.04)\n","    self.f_damage = int(damage * sword * 0.04)\n","\n","  def get_params(self):\n","    return (f'''Характеристики воина {self.name}:\n","\n","            Сила: {self.damage}\n","            Здоровье: {self.hp}\n","            Броня: {self.armor}\n","            Оружие: {self.sword}\n","            ----------------\n","            Итоговые характеристики:\n","\n","            HP: {self.f_hp}\n","            Damage: {self.f_damage}''')\n","\n","\n","\n","class dragon:\n","\n","  def __init__(self, name, hp, damage):\n","    self.name = name\n","    self.hp = hp\n","    self.damage = damage\n","\n","  def get_params(self):\n","    return (f'''Характеристики врага {self.name}:\n","\n","            Сила: {self.damage}\n","            Здоровье: {self.hp}''')\n","\n","\n","\n","def fight(character, dragon):\n","\n","  print()\n","  print('Начинаем бой!')\n","  time.sleep(2)\n","\n","  print()\n","  print(f'Здоровье игрока: {character.f_hp}')\n","  print(f'Здоровье дракона: {dragon.hp}')\n","\n","  while (int(character.f_hp > 0)) and (int(dragon.hp > 0)):\n","\n","    time.sleep(1)\n","\n","    print()\n","    print('Удар делает игрок!')\n","    print()\n","\n","    dragon.hp -= character.f_damage\n","    time.sleep(1)\n","    print()\n","    print(f'Здоровье игрока: {character.f_hp}')\n","    print(f'Здоровье дракона: {dragon.hp}')\n","\n","    time.sleep(1)\n","\n","    print()\n","    print('Удар делает дракон!')\n","    print()\n","\n","    character.f_hp -= dragon.damage\n","    print()\n","    print(f'Здоровье игрока: {character.f_hp}')\n","    print(f'Здоровье дракона: {dragon.hp}')\n","\n","  if int(character.f_hp) <= 0: print('ПОБЕДИЛ ДРАКОН')\n","\n","  elif int(dragon.hp <= 0): print('ПОБЕДИЛ РЫЦАРЬ')\n","\n","\n","def main():\n","\n","  print('Начнем с создания персонажа')\n","  print('')\n","  name = input('Имя: ')\n","\n","  while True: #hp\n","\n","    print('''\n","    Здоровье:\n","    1 - слабак\n","    2 - крестьянин\n","    3 - богатырь\n","    ''')\n","    choice = input('Ввод: ')\n","    if choice == '1' or choice == '2' or choice == '3':\n","      if choice == '1': hp = 35\n","      elif choice == '2': hp = 60\n","      elif choice == '3': hp = 100\n","      break\n","    print('Введите что-то из предложенных вариантов')\n","\n","  while True: #damage\n","\n","    print('''\n","    Сила:\n","    1 - руки-крюки\n","    2 - атлет\n","    3 - второй арнольд шварцнигер\n","    ''')\n","    choice = input('Ввод: ')\n","    if choice == '1' or choice == '2' or choice == '3':\n","      if choice == '1': damage = 35\n","      elif choice == '2': damage = 60\n","      elif choice == '3': damage = 100\n","      break\n","    print('Введите что-то из предложенных вариантов')\n","\n","  while True: #armor\n","\n","    print('''\n","    Броня:\n","    1 - медная броня\n","    2 - сплошная сталь\n","    3 - эбонитовый набор брони\n","    ''')\n","    choice = input('Ввод: ')\n","    if choice == '1' or choice == '2' or choice == '3':\n","      if choice == '1': armor = 35\n","      elif choice == '2': armor = 60\n","      elif choice == '3': armor = 100\n","      break\n","    print('Введите что-то из предложенных вариантов')\n","\n","  while True: #sword\n","\n","    print('''\n","    Оружие:\n","    1 - деревянный меч\n","    2 - кристаллический меч\n","    3 - вилка\n","    ''')\n","    choice = input('Ввод: ')\n","\n","    if choice == '1' or choice == '2' or choice == '3':\n","      if choice == '1': sword = 35\n","      elif choice == '2': sword = 60\n","      elif choice == '3': sword = 100\n","      break\n","    print('Введите что-то из предложенных вариантов')\n","\n","\n","  character = knight(name, hp, damage, armor, sword)\n","\n","  time.sleep(3)\n","  print()\n","  print(character.get_params())\n","  print()\n","\n","  time.sleep(2)\n","  print()\n","  print('Я решил, что создавать дракона, как в прошлой практике слишком казуально')\n","  print('Поэтому за тебя это сделает программа')\n","\n","  hp = random.choice(range(1, 500))\n","  damage = random.choice(range(1, 500))\n","\n","  enemy = dragon('Дракоша', hp, damage)\n","\n","  time.sleep(2)\n","  print()\n","  print(enemy.get_params())\n","  print()\n","\n","  time.sleep(1)\n","  fight(character, enemy)\n","\n","\n","main()"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732646405074,"user_tz":-300,"elapsed":28838,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"bc5b9831-b949-4874-e1e9-073e27fc6f04"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Начнем с создания персонажа\n","\n","Имя: 22\n","\n","    Здоровье:\n","    1 - слабак\n","    2 - крестьянин\n","    3 - богатырь\n","    \n","Ввод: 3\n","\n","    Сила:\n","    1 - руки-крюки\n","    2 - атлет\n","    3 - второй арнольд шварцнигер\n","    \n","Ввод: 2\n","\n","    Броня:\n","    1 - медная броня\n","    2 - сплошная сталь\n","    3 - эбонитовый набор брони\n","    \n","Ввод: 3\n","\n","    Оружие:\n","    1 - деревянный меч\n","    2 - кристаллический меч\n","    3 - вилка\n","    \n","Ввод: 2\n","\n","Характеристики воина 22:\n","            \n","            Сила: 60\n","            Здоровье: 100\n","            Броня: 100\n","            Оружие: 60\n","            ----------------\n","            Итоговые характеристики:\n","\n","            HP: 400\n","            Damage: 144\n","\n","\n","Я решил, что создавать дракона, как в прошлой практике слишком казуально\n","Поэтому за тебя это сделает программа\n","\n","Характеристики врага Дракоша:\n","            \n","            Сила: 405\n","            Здоровье: 512\n","\n","\n","Начинаем бой!\n","\n","Здоровье игрока: 400\n","Здоровье дракона: 512\n","\n","Удар делает игрок!\n","\n","\n","Здоровье игрока: 400\n","Здоровье дракона: 368\n","\n","Удар делает дракон!\n","\n","\n","Здоровье игрока: -5\n","Здоровье дракона: 368\n","ПОБЕДИЛ ДРАКОН\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":[],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ZXOWt9LeqWx0"},"execution_count":null,"outputs":[]}]}