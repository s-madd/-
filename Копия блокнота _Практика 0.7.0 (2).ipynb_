{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730284832111}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["Рассадин Вячеслав Александрович"],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":[],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730284943010,"user_tz":-300,"elapsed":8419,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"76ac08fa-6b07-4cfa-edd5-d8264166c785"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n"]}]},{"cell_type":"code","source":["import requests as req\n","from datetime import datetime\n","\n","\n","\n","def send_req(url):\n","  response = req.get(url)\n","  if response.status_code == 200:\n","    return response.json()\n","\n","\n","def clr_data(data):\n","\n","  dt = datetime.today().date()\n","  dt = f'{dt.day}.{dt.month}'\n","  temp = data['current']['temperature_2m']\n","  temp_format = data['current_units']['temperature_2m']\n","\n","  wthr_code = data['current']['weather_code']\n","\n","  if wthr_code == 0:\n","    weather = 'Ясно'\n","  elif wthr_code == 1:\n","    weather = 'Преимущественно ясно'\n","  elif wthr_code == 2:\n","    weather = 'Облачно'\n","  elif wthr_code == 3:\n","    weather = 'Пасмурно'\n","  elif wthr_code == 45 or wthr_code == 48:\n","    weather = 'Туман'\n","  elif wthr_code in [61, 63, 67]:\n","    weather = 'Дождик'\n","  elif wthr_code in [71, 73, 75, 77]:\n","    weather = 'Снежок'\n","  else:\n","    weather = 'На улице либо дождь, либо дождя нет'\n","\n","  return f'({dt}) - Сейчас {temp}{temp_format}. {weather}.'\n","\n","\n","def main(params):\n","\n","  url = f'https://api.open-meteo.com/v1/forecast?latitude={params[0]}&longitude={params[1]}&current=temperature_2m,precipitation,weather_code&timezone=Europe%2FMoscow&forecast_days=1'\n","\n","  data = send_req(url)\n","  message = clr_data(data)\n","\n","  print(message)\n","\n","\n","params = [56.50, 60.35]\n","main(params)"],"metadata":{"id":"DoEJcrkY8sVz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730289284613,"user_tz":-300,"elapsed":718,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"4e5e0a06-9566-4430-a76a-3b344749cc64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(30.10) - Сейчас 1.9°C. Облачно.\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests as req\n","\n","\n","def send_req(url):\n","\n","  response = req.get(url)\n","\n","  if response.status_code == 200:\n","    return response.json()\n","\n","  else:\n","    print('Проблема на стороне сайта или неверно введено имя покемона (скорее второе)')\n","\n","\n","def clr_data(data):\n","\n","  name = data['name']\n","  weight = data['weight']\n","  height = data['height']\n","  tipe = data['types'][0]['type']['name']\n","  message1 = f'({name}) - Тип: {tipe}. Вес: {weight}. Рост: {height}.'\n","\n","  abilities = []\n","\n","  for i in data['abilities']:\n","    abilities.append(i['ability']['name'])\n","  message2 = 'Способности: '\n","\n","  for i in range(len(abilities)):\n","    message2 += f'{abilities[i]}'\n","    if i != (len(abilities) - 1):\n","      message2 += ', '\n","\n","  return [message1, message2]\n","\n","\n","def main(par):\n","\n","  url = f'https://pokeapi.co/api/v2/pokemon/{par}'\n","  data = send_req(url)\n","  message = clr_data(data)\n","\n","  print(message[0])\n","  print(message[1])\n","\n","\n","vvod = input('Имя покемона: ')\n","main(vvod)"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730448980503,"user_tz":-300,"elapsed":3996,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"a8501486-05ac-48e6-f930-b87ca7b455b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Имя покемона: clefairy\n","(clefairy) - Тип: fairy. Вес: 75. Рост: 6.\n","Способности: cute-charm, magic-guard, friend-guard\n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests as req\n","\n","\n","def send_req(url): #1\n","\n","  response = req.get(url)\n","\n","if response.status_code == 200:\n","    return response.json()\n","\n","\n","def search_id(post_id, url): #2\n","\n","  data = send_req(url)\n","\n","  for i in data:\n","\n","    if i['id'] == post_id:\n","      return i\n","\n","\n","def clr_search(data): #3\n","\n","  user_id = data['userId']\n","  post_id = data['id']\n","  title = data['title']\n","  body = data['body']\n","\n","  print('ID Пользователя:', user_id)\n","  print('ID Сообщения:', post_id)\n","  print()\n","  print('Заголовок:', title)\n","  print()\n","  print('Текст:', body)\n","\n","url = 'https://jsonplaceholder.typicode.com/posts'\n","\n","clr_search(search_id(5, url))"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730450374266,"user_tz":-300,"elapsed":428,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"71411518-d232-465f-b142-b8b792cdbeb1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ID Пользователя: 1\n","ID Сообщения: 5\n","\n","Заголовок: nesciunt quas odio\n","\n","Текст: repudiandae veniam quaerat sunt sed\n","alias aut fugiat sit autem sed est\n","voluptatem omnis possimus esse voluptatibus quis\n","est aut tenetur dolor neque\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["import requests as req\n","\n","urll = 'https://jsonplaceholder.typicode.com/posts'\n","\n","def send_req(url):\n","\n","  response = req.get(url)\n","\n","  if response.status_code == 200:\n","    return response.json()\n","\n","\n","def create_post(url): #1\n","\n","  id_user = input('ID Пользователя: ')\n","  title = input('Заголовок: ')\n","  body = input('Текст: ')\n","\n","  obj = {\n","      'userId': id_user,\n","      'title': title,\n","      'body': body\n","  }\n","\n","  print('Пост создан')\n","  response = req.post(url, data = obj)\n","\n","  return response.json()\n","\n","\n","def update_post(url): #2\n","\n","  id_post = input('Введите номер поста: ')\n","  title = input('Заголовок: ')\n","  body = input('Текст: ')\n","\n","  obj = {\n","      'id': id_post,\n","      'title': title,\n","      'body': body\n","  }\n","\n","  print('Пост обновлен')\n","  response = req.put(url, data = obj)\n","\n","  return response.json()\n","\n","def delete_post(url): #3\n","\n","  id_post = input('Введите номер поста: ')\n","  obj ={\n","      'id': id_post\n","  }\n","  response = req.delete(url, data = obj)\n","  return response\n","\n","print(delete_post(urll))\n"],"metadata":{"id":"jZUIdwq96DNl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730559914172,"user_tz":-300,"elapsed":2662,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"d62036f5-c53f-4291-f82e-550d55a0080d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите номер поста: 2\n","<Response [404]>\n"]}]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests\n","from PIL import Image\n","import io\n","from IPython.display import display\n","\n","url = \"https://dog.ceo/api/breeds/list/all\"\n","\n","def entry_parods( ):\n","\n","  breeds = input(\"Введите породы собак через запятую: \").split(\", \")\n","\n","  return breeds\n","\n","\n","def parod_list(url):\n","\n","  response = requests.get(url)\n","\n","  if response.status_code == 200:\n","    res = response.json( )\n","    num = 0\n","\n","    print(\"Породы собак: \")\n","\n","    for breeds in res[\"message\"].keys( ):\n","      num += 1\n","\n","      print(f'{num}. {breeds}')\n","\n","\n","def image( ):\n","\n","  epl = entry_parods( )\n","\n","  for num_image in epl:\n","    image_breed = f'https://dog.ceo/api/breed/{num_image}/images/random'\n","    res = requests.get(image_breed)\n","    img_url_json = res.json( )\n","    img_response = requests.get(img_url_json['message'])\n","    img = Image.open(io.BytesIO(img_response.content))\n","\n","    display(img)\n","\n","\n","parod_list(url)\n","image( )"],"metadata":{"id":"5xti3KRP4Kzp","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1uOpXRGWZoYV_FjN2nofcdj6shH1K8Y3E"},"executionInfo":{"status":"ok","timestamp":1731844853639,"user_tz":-300,"elapsed":24768,"user":{"displayName":"Вячеслав","userId":"04005648150973531437"}},"outputId":"1d767ff5-2fb7-4dc0-a4f5-67c1d3abd847"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}